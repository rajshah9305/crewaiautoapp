import React, { useState, useCallback } from 'react';
import * as agentService from '../services/agentService';
import BrushIcon from './icons/BrushIcon';
import SparklesIcon from './icons/SparklesIcon';
import DownloadIcon from './icons/DownloadIcon';
import XIcon from './icons/XIcon';

const ImageGenerator: React.FC = () => {
    const [prompt, setPrompt] = useState<string>('A retro-futuristic mission badge for an AI crew, vector art, clean lines, vibrant colors, epic space background.');
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [imageDataUrl, setImageDataUrl] = useState<string | null>(null);

    const handleGenerate = useCallback(async () => {
        if (!prompt || isLoading) return;
        setIsLoading(true);
        setError(null);
        setImageDataUrl(null);

        try {
            const base64Bytes = await agentService.generateImage(prompt);
            setImageDataUrl(`data:image/png;base64,${base64Bytes}`);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred.');
        } finally {
            setIsLoading(false);
        }
    }, [prompt, isLoading]);

    const handleDownload = () => {
        if (!imageDataUrl) return;
        const link = document.createElement('a');
        link.href = imageDataUrl;
        link.download = 'crewai-generated-image.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <div className="h-full w-full max-w-4xl mx-auto flex flex-col animate-fadeInUp p-4">
            <h2 className="text-2xl font-bold text-text-primary text-center flex items-center justify-center gap-3 mb-6">
                <BrushIcon className="h-7 w-7 text-secondary" />
                Design Bay
            </h2>

            <div className="flex-1 flex flex-col md:flex-row gap-6">
                {/* Controls */}
                <div className="md:w-1/3 flex flex-col gap-4">
                    <label htmlFor="prompt-input" className="font-semibold text-text-primary">
                        Image Prompt
                    </label>
                    <textarea
                        id="prompt-input"
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        placeholder="e.g., A robot holding a red skateboard."
                        className="w-full flex-1 bg-surface border-2 border-border rounded-xl p-3 resize-none focus:outline-none focus:ring-0 focus:border-primary/50 placeholder-text-secondary/80 text-sm transition-all duration-200 shadow-inner"
                        rows={6}
                        disabled={isLoading}
                    />
                    <button
                        onClick={handleGenerate}
                        disabled={isLoading || !prompt.trim()}
                        className="w-full flex items-center justify-center gap-2 bg-cta text-black font-bold text-base py-3 px-4 rounded-lg transition-all duration-200 hover:bg-amber-500 active:scale-95 shadow-md hover:shadow-lg hover:shadow-primary/40 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <SparklesIcon className="h-5 w-5" />
                        <span>{isLoading ? 'Generating...' : 'Generate Image'}</span>
                    </button>
                </div>

                {/* Output */}
                <div className="flex-1 flex flex-col items-center justify-center bg-surface border border-border rounded-xl shadow-inner p-4 relative aspect-square">
                    {isLoading && (
                        <div className="absolute inset-0 bg-background/50 flex flex-col items-center justify-center rounded-xl animate-pulse">
                            <SparklesIcon className="h-12 w-12 text-primary opacity-75" />
                            <p className="mt-4 text-text-secondary">Conjuring pixels from the cosmos...</p>
                        </div>
                    )}
                    {error && !isLoading && (
                        <div className="text-center text-error">
                            <XIcon className="h-10 w-10 mx-auto mb-2" />
                            <p className="font-semibold">Generation Failed</p>
                            <p className="text-xs mt-1">{error}</p>
                        </div>
                    )}
                    {imageDataUrl && !isLoading && (
                        <>
                            <img
                                src={imageDataUrl}
                                alt="Generated by AI"
                                className="w-full h-full object-contain rounded-lg"
                            />
                            <button
                                onClick={handleDownload}
                                className="absolute bottom-4 right-4 flex items-center gap-2 text-sm font-semibold text-primary bg-surface/80 backdrop-blur-sm px-3 py-2 rounded-md hover:bg-background transition-colors border border-border active:scale-95"
                            >
                                <DownloadIcon className="h-5 w-5" />
                                <span>Download</span>
                            </button>
                        </>
                    )}
                    {!imageDataUrl && !isLoading && !error && (
                         <div className="text-center text-text-secondary">
                            <BrushIcon className="h-12 w-12 mx-auto mb-4 opacity-50"/>
                            <p>Your generated image will appear here.</p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ImageGenerator;
